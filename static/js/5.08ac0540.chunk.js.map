{"version":3,"sources":["components/login/loginButton/ButtonLogin.tsx","components/login/loginInput/InputTextLogin.tsx","components/login/loginForm/FormLogin.tsx","components/login/errorForm/ErrorForm.tsx","components/login/loginPage/PageLogin.tsx","layouts/login.tsx"],"names":["ButtonLogin","status","autorization","isLoading","btnClass","classNames","active","className","disabled","onClick","undefined","e","preventDefault","InputTextLogin","value","keyInput","title","changeValue","placeholder","type","onChange","currentTarget","FormLogin","navigate","useNavigate","dispatch","useDispatch","useState","login","password","setLogin","useSelector","state","loading","currentUser","app","user","changeState","key","copyLogin","useEffect","val","length","validation","loadingActions","ErrorForm","message","errorAction","errorClose","data-testid","PageLogin","errorMessage","usersThunks","onFetchUsers","Login"],"mappings":"mSA+BeA,EArBsB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAMtDC,EAAWC,IAAW,cAAe,CACzCC,QAAmB,IAAXL,IAAiC,IAAdE,IAG7B,OACE,wBACEI,UAAWH,EACXI,UAAqB,IAAXP,IAAkC,IAAdE,EAC9BM,QAAUN,OAA2BO,EAbpB,SAACC,GACpBA,EAAEC,iBACFV,KAQA,SAKGC,EAAY,4DAAiB,8BCWrBU,G,OA1BwB,SAAC,GAMjC,IALLC,EAKI,EALJA,MACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,YACAd,EACI,EADJA,UAKA,OACE,qBAAKI,UAAU,aAAf,SACE,kCACGS,EACD,uBACEE,YAAaF,EACbG,KAAK,OACLL,MAAOA,EACPM,SAXO,SAACT,GACdM,EAAYF,EAAUJ,EAAEU,cAAcP,QAWhCN,SAAUL,W,+BCkDLmB,EAjEG,WAChB,IAAMC,EAAWC,cACXC,EAAWC,cAFK,EAGIC,mBAAoB,CAC5CC,MAAO,GACPC,SAAU,KALU,mBAGfD,EAHe,KAGRE,EAHQ,KAOhB3B,EAAY4B,aAChB,SAACC,GAAD,OAAWA,EAAMC,QAAQ9B,aAGrB+B,EAAcH,aAClB,SAACC,GAAD,OAAWA,EAAMG,IAAIC,QAGjBC,EAAc,SAACC,EAAaxB,GAChC,IAAMyB,EAAS,eAAQX,GACvBW,EAAUD,GAAOxB,EACjBgB,EAASS,IAmBX,OAJAC,qBAAU,WACY,OAAhBN,GAAsBX,EAAS,OAClC,CAACW,IAGF,uBAAM3B,UAAU,YAAhB,UACE,oBAAIA,UAAU,mBAAd,4EACA,gCACE,cAAC,EAAD,CACES,MAAM,iCACND,SAAS,QACTD,MAAOc,EAAMA,MACbX,YAAaoB,EACblC,UAAWA,IAEb,cAAC,EAAD,CACEa,MAAM,uCACND,SAAS,WACTD,MAAOc,EAAMC,SACbZ,YAAaoB,EACblC,UAAWA,OAGf,cAAC,EAAD,CACEF,OApCa,SAAC2B,EAAeC,GACjC,IAAIY,GAAM,EAIV,OAHIb,EAAMc,QAAU,GAAKb,EAASa,QAAU,IAC1CD,GAAM,GAEDA,EA+BKE,CAAWf,EAAMA,MAAOA,EAAMC,UACtC3B,aA7Be,WACnBuB,EAASmB,IAAsB1C,aAAa0B,EAAMA,MAAOA,EAAMC,YA6B3D1B,UAAWA,Q,kCC1CJ0C,EAvBwB,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAClCrB,EAAWC,cAMjB,OACE,qBAAKnB,UAAU,YAAf,SACE,sBAAKA,UAAU,YAAf,UACE,qBAAKA,UAAU,mBAAf,SAAmCuC,IACnC,wBACEvC,UAAU,oBACVE,QAVM,WACZgB,EAASsB,IAAoBC,eAUvBC,cAAY,YAHd,4HCWOC,EAlBG,WAChB,IAAMzB,EAAWC,cACXyB,EAAepB,aACnB,SAACC,GAAD,OAAWA,EAAMmB,aAAaA,gBAOhC,OAJAX,qBAAU,WACRf,EAAS2B,IAAYC,kBACpB,IAGD,sBAAKJ,cAAY,QAAQ1C,UAAU,YAAnC,UACE,cAAC,EAAD,IACkB,KAAjB4C,EAAsB,cAAC,EAAD,CAAWL,QAASK,IAAmB,OCfrDG,UARD,WACZ,OACE,mCACE,cAAC,EAAD","file":"static/js/5.08ac0540.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from \"react\";\r\nimport \"./ButtonLogin.scss\";\r\nimport classNames from \"classnames\";\r\n\r\nexport interface buttonLogin {\r\n  status: boolean;\r\n  autorization(): void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst ButtonLogin: FC<buttonLogin> = ({ status, autorization, isLoading }) => {\r\n  const confirmLogin = (e: React.FormEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    autorization();\r\n  };\r\n\r\n  const btnClass = classNames(\"loginButton\", {\r\n    active: status === true && isLoading !== true,\r\n  });\r\n\r\n  return (\r\n    <button\r\n      className={btnClass}\r\n      disabled={status !== false && isLoading !== true ? false : true}\r\n      onClick={!isLoading ? confirmLogin : undefined}\r\n    >\r\n      {isLoading ? \"Подождите...\" : \"Вход\"}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ButtonLogin;\r\n","import React, { FC } from \"react\";\r\nimport \"./InputTextLogin.scss\";\r\n\r\nexport interface inputProps {\r\n  keyInput: string;\r\n  value: string;\r\n  title: string;\r\n  changeValue(name: string, value: string): void;\r\n  isLoading: boolean;\r\n}\r\n\r\nconst InputTextLogin: FC<inputProps> = ({\r\n  value,\r\n  keyInput,\r\n  title,\r\n  changeValue,\r\n  isLoading,\r\n}) => {\r\n  const change = (e: React.FormEvent<HTMLInputElement>) => {\r\n    changeValue(keyInput, e.currentTarget.value);\r\n  };\r\n  return (\r\n    <div className=\"inputLogin\">\r\n      <label>\r\n        {title}\r\n        <input\r\n          placeholder={title}\r\n          type=\"text\"\r\n          value={value}\r\n          onChange={change}\r\n          disabled={isLoading}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputTextLogin;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport ButtonLogin from \"../loginButton/ButtonLogin\";\r\nimport InputTextLogin from \"../loginInput/InputTextLogin\";\r\nimport \"./FormLogin.scss\";\r\nimport * as loadingActions from \"../../../store/loadingLoginForm/loadingLoginForm.actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootState } from \"../../../store/state.types\";\r\nimport { UserModel } from \"../../../api/models/user.model\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nexport interface loginForm {\r\n  login: string;\r\n  password: string;\r\n}\r\n\r\nconst FormLogin = () => {\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const [login, setLogin] = useState<loginForm>({\r\n    login: \"\",\r\n    password: \"\",\r\n  });\r\n  const isLoading = useSelector<RootState, boolean>(\r\n    (state) => state.loading.isLoading\r\n  );\r\n\r\n  const currentUser = useSelector<RootState, UserModel | null>(\r\n    (state) => state.app.user\r\n  );\r\n\r\n  const changeState = (key: string, value: string) => {\r\n    const copyLogin = { ...login };\r\n    copyLogin[key] = value;\r\n    setLogin(copyLogin);\r\n  };\r\n\r\n  const validation = (login: string, password: string): boolean => {\r\n    let val = false;\r\n    if (login.length >= 4 && password.length >= 4) {\r\n      val = true;\r\n    }\r\n    return val;\r\n  };\r\n\r\n  const autorization = () => {\r\n    dispatch(loadingActions.Thunks.autorization(login.login, login.password));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (currentUser !== null) navigate(\"/\");\r\n  }, [currentUser]);\r\n\r\n  return (\r\n    <form className=\"loginForm\">\r\n      <h1 className=\"loginForm__title\">Вход на сайт</h1>\r\n      <div>\r\n        <InputTextLogin\r\n          title=\"Логин\"\r\n          keyInput=\"login\"\r\n          value={login.login}\r\n          changeValue={changeState}\r\n          isLoading={isLoading}\r\n        ></InputTextLogin>\r\n        <InputTextLogin\r\n          title=\"Пароль\"\r\n          keyInput=\"password\"\r\n          value={login.password}\r\n          changeValue={changeState}\r\n          isLoading={isLoading}\r\n        ></InputTextLogin>\r\n      </div>\r\n      <ButtonLogin\r\n        status={validation(login.login, login.password)}\r\n        autorization={autorization}\r\n        isLoading={isLoading}\r\n      ></ButtonLogin>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default FormLogin;\r\n","import React, { FC } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport \"./ErrorForm.scss\";\r\nimport * as errorAction from \"../../../store/errorMessage/errorMessage.actions\";\r\n\r\nexport interface IErrorFormProps {\r\n  message: string;\r\n}\r\n\r\nconst ErrorForm: FC<IErrorFormProps> = ({ message }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const click = () => {\r\n    dispatch(errorAction.Actions.errorClose());\r\n  };\r\n\r\n  return (\r\n    <div className=\"errorForm\">\r\n      <div className=\"errorBody\">\r\n        <div className=\"errorBody__title\">{message}</div>\r\n        <button\r\n          className=\"errorBody__button\"\r\n          onClick={click}\r\n          data-testid=\"try-again\"\r\n        >\r\n          Попробовать ещё раз\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorForm;\r\n","import React, { useEffect } from \"react\";\r\nimport FormLogin from \"../loginForm/FormLogin\";\r\nimport \"./PageLogin.scss\";\r\nimport {\r\n  getFetchingUsers,\r\n  getFetchingUsersError,\r\n  getUsers,\r\n  Thunks as usersThunks,\r\n} from \"../../../store/users\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport ErrorForm from \"../errorForm/ErrorForm\";\r\nimport { RootState } from \"./../../../store/state.types\";\r\n\r\nconst PageLogin = () => {\r\n  const dispatch = useDispatch();\r\n  const errorMessage = useSelector<RootState, string>(\r\n    (state) => state.errorMessage.errorMessage\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(usersThunks.onFetchUsers());\r\n  }, []);\r\n\r\n  return (\r\n    <div data-testid=\"login\" className=\"loginPage\">\r\n      <FormLogin />\r\n      {errorMessage !== \"\" ? <ErrorForm message={errorMessage} /> : \"\"}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PageLogin;\r\n","import React from \"react\";\r\nimport PageLogin from \"../components/login/loginPage/PageLogin\";\r\n\r\nconst Login = () => {\r\n  return (\r\n    <>\r\n      <PageLogin />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}